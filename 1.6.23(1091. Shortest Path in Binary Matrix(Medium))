class Solution {
    vector<vector<int>>dir = {{0,-1},{-1,-1},{-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1}};
    int n;
public:
    int in_bound(int i,int j)
    {
        return (i >= 0 && i < n && j >= 0 && j < n);
    }
    int shortestPathBinaryMatrix(vector<vector<int>>& grid)
    {
        typedef pair<int,pair<int,int>>P;

        n = grid.size();
        if(grid[0][0] || grid[n-1][n-1]) return -1;

       //using single source sortest path dijkstra algo
       //here i have to store x,y index 
       priority_queue<P,vector<P>,greater<P>>pq;

       vector<vector<int>>dist(n,vector<int>(n,INT_MAX));
       
       //dijstra algo 
       //source is 0,0;
       pq.push({0,{0,0}});
       dist[0][0] = 0;

       while(pq.size())
       {
           auto it = pq.top();
           pq.pop();

           //now relaxation if i can relax it i will push it into my queue 
           int d = it.first;
           int x = it.second.first;
           int y = it.second.second;

           //explore all the direction
           for(auto di: dir)
           {
               int x_ = x + di[0];
               int y_ = y + di[1];

               if(in_bound(x_,y_) && !grid[x_][y_] && d + 1 < dist[x_][y_])
               {
                   pq.push({d+1,{x_,y_}});
                   dist[x_][y_] = d + 1;
               }
           }
       }

       return (dist[n-1][n-1] == INT_MAX)? -1:dist[n-1][n-1]+1;
    }
};
