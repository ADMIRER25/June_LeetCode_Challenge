class Solution {
     vector<vector<int>>directions = {{-1,0},{0,-1},{1,0},{0,1}};
     bool cancross(int row, int col, vector<vector<int>>&cells,int day)
     {
             vector<vector<int>>grid(row,vector<int>(col,0));
            //chaka jum korbo day diner
            for(int i = 0; i < day;i++)
            {
                int r = cells[i][0];
                int c = cells[i][1];
                grid[r-1][c-1] = 1;
            }

            queue<pair<int,int>>q;

            for(int j = 0; j < col; j++)
            {
                int x = 0;
                int y = j;

                if(grid[x][y] == 1) continue;

                // bfs 
                q.push({x,y});
                grid[x][y] = 1;
                
                while(q.size())
                {
                    auto it = q.front();
                    q.pop();

                    int r1 = it.first;
                    int c1 = it.second;

                    if(r1 == row - 1)
                    {
                       return true;
                    }

                    // try to go in all 4 directions 
                    for(auto &dir : directions)
                    {
                        int i_ = r1 + dir[0];
                        int j_ = c1 + dir[1];

                        if(i_ >= 0 && i_ < row && j_ >= 0 && j_ < col && grid[i_][j_] != 1)
                        {
                                grid[i_][j_] = 1;
                                q.push({i_,j_});
                        }
                    }
                }
            }
            return false;
     }
public:
    int latestDayToCross(int row, int col, vector<vector<int>>& cells) 
    {
        
        int left = 1;
        int right = row*col;

        while(left <= right)                                           |        while(left < right)
        {                                                              |        { 
            int mid = left + (right - left)/2;                         |            int mid = right - (right - left)/2;           
            if(cancross(row,col,cells,mid)) left = mid+1;              |            if(cancross(row,col,cells,mid)) left = mid;
            else right = mid - 1;                                      |            else right = mid - 1;      
        }                                                              |        }
        return right;                                                  |        end left;
    }
};
